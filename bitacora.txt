# Ejercicio 1
.syntax unified
.global _start
.text

.equ diri, 0x20000800
.thumb_func
_start:
    bl  guardar_datos
    bx  lr

guardar_datos:
    ldr   r4, =diri 
    mov   r0, #50     // Inicializa el primer número a guardar
    mov   r1, #140    // Último número a guardar
loop_guardar:
    str   r0, [r4], #4 // Guarda el número en la memoria y avanza a la siguiente posición
    adds  r0, #10     // Incrementa el número en 100 para el siguiente ciclo
    cmp   r0, r1       // Compara si se ha alcanzado el último número
    ble   loop_guardar // Si no se ha alcanzado el último número, continuar guardando
    bx    lr           // Retorna

# Ejercicio 2 

.syntax unified
.global _start
.text

.thumb_func
_start:
    bl  init            // bl: entra a la subrutina de init ---> se actualizó el lr a la direccion de retorno
    bl  cargar_memoria  // de la ejecucion
loop:
    bl  copiar_datos
    b   loop

init:
    mov   r0, #0        // se asegura que los valores iniciales de los registros sea 0
    mov   r1, #0        // Sin embargo es algo un poco inutil, porque en las lineas siguiente se cambian
    mov   r2, #0        // estos valores. Además nunca se utiliza el r2. Mejor no poner esta subrutina
    bx    lr            // bx: salta a la direccion de lr

cargar_memoria:           
    ldr   r4, =#0x20000000  // almacena los valore en los registros
    mov   r0, #1            // valor que será guardado en las distintas direcciones
    mov   r1, #10           // valor máximo de iteraciones, que se irá restando de a uno en loop_carga

loop_carga:
    str   r0, [r4], #4   // almacena lo guardado en r0, en la direccion guardada en r4, +4 en cada iteracion
	  adds  r1, #-1      // suma r1 = r1-1 y actualiza la bandera. 
    beq   fin_carga      // beq: Salta si el resultado de la comparación es igual a cero ---> si lo anterior
    b     loop_carga     // (la bandera) es cero (la bandera Z = 1, cuando es 0)
                            // b: si esto no pasa, salta una vez más al loop_carga
fin_carga:
    bx    lr            // una vez se haya acabado el loop carga, el programa se dirige aquí, y vuelve donde 
                        // estaba el lr, en este caso, para entrar a "loop"
copiar_datos:
    ldr   r4, =#0x20000000  // guarda esta dirección en r4
loop_copia:
    ldr   r0, [r4]          // guarda el valor de r0, en la direccion almacenada en r4
    cmp   r0, #0            // cmp: compara si r0 es 0, y actualiza la bandera
    beq   fin_copia         // si es 0, termina el loop
    str   r0, [r4, #0x100]  // si no lo es, se guarda lo de r0 en la direccion almacenada en r4+4
    add   r4, #4            // añade 4 a esta direccion
    b     loop_copia
fin_copia:
    bx    lr        // se puede considerar como una falla del programa, pues no tiene mucho sentido que se  
                    // vuelva a iterar una vez más toda la funcion loop, y volver a copiar los datos una 
                    // y otra vez


# Ejercicio 3 

10001111
10001000
10001000
11111111
00001001
00001001
00001001
01111001

.syntax unified
.global _start
.text

.thumb_func
_start:
    bl  crear_tabla_leds
    bx  lr

crear_tabla_leds:
    ldr   r4, =#0x20000000 // Dirección inicial de memoria para guardar la tabla
    ldr   r1, =leds        // Dirección de la tabla en la memoria de programa
    mov   r2, #8           // Tamaño de la matriz (filas)
    mov   r3, #8           // Tamaño de la matriz (columnas)
loop_filas:
    ldrb  r0, [r1], #1     // Carga el byte actual de la tabla de LED
    strb  r0, [r4], #1     // Guarda el byte en la dirección de memoria y avanza
    subs  r3, r3, #1       // Decrementa el contador de columnas
    bne   loop_filas       // Continúa el bucle si no se han procesado todas las columnas
    bx    lr               // Retorna

.section .rodata
leds:
    .byte 0b10001111 // Representación de la primera fila de LEDs
    .byte 0b10001000 // Representación de la segunda fila de LEDs
    .byte 0b10001000 // Representación de la tercera fila de LEDs
    .byte 0b11111111 // Representación de la cuarta fila de LEDs
    .byte 0b00001001 // Representación de la quinta fila de LEDs
    .byte 0b00001001 // Representación de la sexta fila de LEDs
    .byte 0b00001001 // Representación de la séptima fila de LEDs
    .byte 0b01111001 // Representación de la octava fila de LEDs


# ejercicio 4

.syntax unified
.global _start
.text

.equ v1, 0x20000100     //guarda direcciones
.equ v2, 0x20000140
.equ vRes, 0x20000200

// Definición de los datos de entrada (vectores)
lista1:
.hword 1,2,3,4,0    //define una lista de media palabra --> 16 bits

lista2:
.hword 2,3,4,5,0

.thumb_func
_start:
    bl    init      
    bl    vector1  
    bl    vector2   
loop:
    bl    mult_vect  
    b     loop       

// Función de inicialización
init:
  // Retorna, no hace nada
  bx    lr

vector1:
  push  {lr}    //guarda lr en el stack 
  ldr   r4, =#lista1    //guarda la direccion de la lista 1 en el registro r4
  ldr   r5, =#v1    //guarda la direccion de v1 en r5
  bl    loop_store
  pop   {pc}

vector2:
  push  {lr}
  ldr   r4, =#lista2
  ldr   r5, =#v2
  bl    loop_store
  pop   {pc}

loop_store:
  ldrh  r0, [r4], #2    //carga la media palabra de la direccion r4 en ro y va sumando 2 en cada iteracion
  cmp   r0, #0          //compara r0 con 0
  beq   end_store       // si la comparacion dio 0, salta end store
  strh  r0, [r5], #2    // si no dio 0, guarda la media palabra de r0 en la direccion guardada en r5 y suma 2 a esta cada iteracion
  b     loop_store
end_store:
  // Retorna
  bx    lr

mult_vect:
  ldr   r4, =#v1
  ldr   r5, =#v2
  ldr   r6, =#vRes
  b     loop_mult

loop_mult:
  ldrh  r0, [r4], #2    //carga en r0 el vector 1
  ldrh  r1, [r5], #2    // carga en r1 el vector 2
  cmp   r0, #0          // compara si llego el 0 que indica que se acabaron las listas 
  beq   end_mult
  cmp   r1, #0
  beq   end_mult
  mul   r0, r1
  str   r0, [r6], #4    //guarda el valor del resultado en la direccion del registro r6, vRes
  b     loop_mult
end_mult:
  // Retorna
  bx    lr

  #ejercicio 5
  las filas de cátodo común y las columnas ánodo común 

  #ejercicio 6 